getapp-api:
  fullnameOverride: getapp-api

#--------------------------------------------------------------------------------
# values from the "variables" section in gilab_ci.yml in this repository
#--------------------------------------------------------------------------------

  replicaCount: 1
  configmap: getapp-dev
  routePrefix: getapp-dev
  routeMainlUrl: apps.sr.eastus.aroapp.io
  dbName: getapp-dev
  webProtocol: https://
#--------------------------------------------------------------------------------
#
# the values of the variables in this section are generaited from the .env file, 
# that is created in this pipeline: 
# https://gitlab.getapp.sh/getapp/Main-version-control/getapp-release-versions/-/blob/master/.gitlab-ci.yml
#
#--------------------------------------------------------------------------------
  gitlabrelease: 1.3.53-develop
  repository: harbor.getapp.sh/getapp-dev/
  tag:
    api: 1.3.70-develop
    delivery: 1.3.54-develop
    deploy: 1.3.22-develop
    discovery: 1.3.77-develop
    offering: 1.3.57-develop
    projectmanagment: 1.3.22-develop
    upload: 1.3.25-develop
    dashboard: 1.2.31-develop
    getmap: 1.3.48-develop
    docs: v1-14-10-2024
  namespace:
      openshiftProjectName: getapp-dev

#--------------------------------------------------------------------------------
# END
#--------------------------------------------------------------------------------

  image:
    repository: harbor.getapp.sh/getapp-dev/api
    tag: 1.0.68
    pullPolicy: Always #IfNotPresent
  imagePullSecrets: 
    # Optionally specify an array of imagePullSecrets.
    # Secrets must be manually created in the namespace.
    # ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    #
    # This uses credentials from secret "myRegistryKeySecretName".
    - name: harbor-registry-secret

  service:
    type: ClusterIP 
    port: 80
  deployment:
    containerPort: 80
  probes:
    enabled: false
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/tls-acme: "true"
    path: /
    # hosts:
    #   - chart-example.local
    tls: []
      # - secretName: chart-example-tls
      #   hosts:
      #     - chart-example.local
  secrets: 
    # Optionally specify a set of secret objects whose values
    # will be injected as environment variables by default.
    # You should add this section to a file like secrets.yaml
    # that is explicitly NOT committed to source code control
    # and then include it as part of your helm install step.
    # ref: https://kubernetes.io/docs/concepts/configuration/secret/
    #
    # This creates a secret "mysecret" and injects "mypassword"
    # as the environment variable mysecret_mypassword=password.
    # mysecret:
    #   mypassword: password
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Authentication Configuration - keycloak
  auth:
    serverUrl: "<AUTH_SERVER_URL>"
    realm: "<REALM>"
    clientId: "<CLIENT_ID>"
    secretKey: "<SECRET_KEY>"
    cookieKey: "<COOKIE_KEY>"

  # Kafka Configuration
  kafka:
    brokerUrl: "<KAFKA_BROKER_URL>"
    noPartitionerWarning: "1"

  # Database Configuration
  postgres:
    host: "<POSTGRES_HOST>"
    port: "<POSTGRES_PORT>"
    user: "<POSTGRES_USER>"
    password: "<POSTGRES_PASSWORD>"
    database: "<POSTGRES_DB>"

  # Service-specific env vars: 
  #serviceEnvVars:
  #  - name: AUTH_SERVER_URL 
  #    value: https://keycloak.getapp.sh/auth
