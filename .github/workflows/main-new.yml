name: Upload to Azure and Get Download Link

on:
  push:
    branches:
      - main

jobs:
  calculate_new_tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.NEW_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      - name: Calculate new tag
        id: set_tag
        run: |
          LAST_TAG=$(git describe --abbrev=0 --tags)
          MAJOR=$(echo $LAST_TAG | awk -F'.' '{print $1}')
          MINOR=$(echo $LAST_TAG | awk -F'.' '{print $2}')
          PATCH=$(echo $LAST_TAG | awk -F'.' '{print $3}' | awk -F'-' '{print $1}')
          SUFFIX=$(echo $LAST_TAG | awk -F'-' '{print $2}')
          NEXT_PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$NEXT_PATCH-$SUFFIX"
          echo "new tag is: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

  get_all_microservices_tags:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get all microservices tags
        env:
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Replace the repository names and owner as needed
          declare -A REPOSITORIES=(
            ["API"]="getappsh/api"
            ["DELIVERY"]="getappsh/delivery"
            ["DEPLOY"]="getappsh/deploy"
            ["DISCOVERY"]="getappsh/discovery"
            ["OFFERING"]="getappsh/offering"
            ["PROJECT_MANAGEMENT"]="getappsh/project-management"
            ["UPLOAD"]="getappsh/upload"
            ["GETMAP"]="getappsh/getmap"
            ["DASHBOARD"]="getappsh/dashboard"
          )

          for PROJECT in "${!REPOSITORIES[@]}"; do
            REPO=${REPOSITORIES[$PROJECT]}
            TAG=$(curl -s -H "Authorization: token $ACCESS_TOKEN" \
              "https://api.github.com/repos/${REPO}/tags" | \
              jq -r '[.[] | select(.name | contains("develop"))][0].name')
            echo "${PROJECT}_TAG=${TAG}" >> .env
          done

          cat .env

      - name: Upload .env file
        uses: actions/upload-artifact@v3
        with:
          name: env-file
          path: .env

  create_full_tag_file:
    needs: get_all_microservices_tags
    runs-on: ubuntu-latest
    steps:
      - name: Download .env file
        uses: actions/download-artifact@v3
        with:
          name: env-file

      - name: Create release files
        run: |
          source .env
          envsubst < stuff/getapp-release-info-template.txt > stuff/getapp-release-info.txt
          envsubst < stuff/images-list-template.txt > getapp-images-list.txt
          envsubst < stuff/docker-compose-template.txt > docker-compose/docker-compose.yaml

          cat stuff/getapp-release-info.txt
          cat getapp-images-list.txt

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-files
          path: |
            stuff/getapp-release-info.txt
            getapp-images-list.txt
            docker-compose/docker-compose.yaml

  update_helm_chart:
    needs: create_full_tag_file
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment variables
        run: |
          if [ -f ".env" ]; then
            export $(grep -v '^#' .env | xargs)
            echo "Loaded variables from .env"
          else
            echo ".env file does not exist."
          fi

      - name: Update Helm chart values
        run: |
            sed -E -i "s,api1":" .*,api":" ${API_TAG},g" integration-chart/values.yml
            sed -E -i "s,delivery":" .*,delivery":" ${DELIVERY_TAG},g" integration-chart/values.yml
            sed -E -i "s,deploy":" .*,deploy":" ${DEPLOY_TAG},g" integration-chart/values.yml
            sed -E -i "s,discovery":" .*,discovery":" ${DISCOVERY_TAG},g" integration-chart/values.yml
            sed -E -i "s,offering":" .*,offering":" ${OFFERING_TAG},g" integration-chart/values.yml
            sed -E -i "s,projectmanagment":" .*,projectmanagment":" ${PROJECT_MANAGMENT_TAG},g" integration-chart/values.yml
            sed -E -i "s,upload":" .*,upload":" ${UPLOAD_TAG},g" integration-chart/values.yml
            sed -E -i "s,dashboard":" .*,dashboard":" ${DASHBOARD_TAG},g" integration-chart/values.yml
            sed -E -i "s,getmap":" .*,getmap":" ${GETMAP_TAG},g" integration-chart/values.yml
            sed -E -i "s,docs":" .*,docs":" ${DOCS_TAG},g" integration-chart/values.yml
            sed -E -i "s,gitlabrelease":" .*,gitlabrelease":" ${GETAPP_RELEASE_TAG},g" integration-chart/values.yml

            # getapp and getmap #
            sed -E -i "s,configmap":" .*,configmap":" ${CONFIGMAP},g" integration-chart/values.yml
            sed -E -i "s,routePrefix":" .*,routePrefix":" ${CONFIGMAP},g" integration-chart/values.yml
            sed -E -i "s,dbName":" .*,dbName":" ${CONFIGMAP},g" integration-chart/values.yml
            sed -E -i "s,openshiftProjectName":" .*,openshiftProjectName":" ${CONFIGMAP},g" integration-chart/values.yml
            sed -E -i "s,replicaCount":" .*,replicaCount":" ${replicaCount},g" integration-chart/values.yml
            cat integration-chart/values.yml

      - name: Save updated Helm chart
        run: |
          mkdir -p artifacts
          cp integration-chart/values.yml artifacts/values.yml

  upload_to_azure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create a text file
        run: echo "This is a simple text file." > simple.txt

      - name: Zip the text file
        run: zip simple.zip simple.txt

      - name: Upload file to Azure Storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload \
              --account-name $AZURE_STORAGE_ACCOUNT \
              --account-key $AZURE_STORAGE_KEY \
              --container-name $AZURE_CONTAINER \
              --file simple.zip \
              --name simple.zip
        env:
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}

      - name: Generate Download Link
        id: get-link
        env:
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}
        run: |
          echo "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_CONTAINER}/simple.zip" > download_link.txt
          cat download_link.txt
