name: Create full Release

on:
  push:
    branches:
      - main

jobs:
  calculate_new_tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.NEW_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      - name: Calculate new tag
        id: set_tag
        run: |
          LAST_TAG=$(git describe --abbrev=0 --tags)
          MAJOR=$(echo $LAST_TAG | awk -F'.' '{print $1}')
          MINOR=$(echo $LAST_TAG | awk -F'.' '{print $2}')
          PATCH=$(echo $LAST_TAG | awk -F'.' '{print $3}' | awk -F'-' '{print $1}')
          SUFFIX=$(echo $LAST_TAG | awk -F'-' '{print $2}')
          NEXT_PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$NEXT_PATCH-$SUFFIX"
          echo "new tag is: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

  get_all_microservices_tags:
    needs: calculate_new_tag
    runs-on: ubuntu-latest
    steps:
      - name: Get all microservices tags
        env:
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -x
          # Clear the file first
          rm .env || true
          
          # Start with the new release tag (only once)
          echo "GETAPP_RELEASE_TAG=${{ needs.calculate_new_tag.outputs.tag }}" > .env
          
          # Define repositories in the order you want them to appear
          declare -A REPOSITORIES=(
            ["API"]="getappsh/api"
            ["DELIVERY"]="getappsh/delivery"
            ["DEPLOY"]="getappsh/deploy"
            ["DISCOVERY"]="getappsh/discovery"
            ["OFFERING"]="getappsh/offering"
            ["PROJECT_MANAGEMENT"]="getappsh/project-management"
            ["UPLOAD"]="getappsh/upload"
            ["GETMAP"]="getappsh/getmap"
            ["DASHBOARD"]="getappsh/dashboard"
          )
          
          # Process each repository and append to .env
          for PROJECT in "${!REPOSITORIES[@]}"; do
            REPO=${REPOSITORIES[$PROJECT]}
            TAG=$(curl -s -H "Authorization: token $ACCESS_TOKEN" \
              "https://api.github.com/repos/${REPO}/tags" | \
              jq -r '[.[] | select(.name | contains("develop"))][0].name // "null"')
            
            # Only append if we got a tag
            if [ ! -z "$TAG" ]; then
              echo "${PROJECT}_TAG=${TAG}" >> .env
            else
              echo "Warning: No tag found for ${REPO}"
            fi
          done
          
          # Print the final contents without line numbers
          echo "Final .env contents:"
          cat .env
          cp .env env-file

      - uses: actions/upload-artifact@v3
        with:
          name: env-file
          path: env-file

    
        
  create_files_with_updated_env:
    needs:
      - get_all_microservices_tags
      - calculate_new_tag
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main        
      
      - name: Download .env file
        uses: actions/download-artifact@v3
        with:
          name: env-file
        
      - name: Move .env file to source directory
        run: |
          mv env-file $GITHUB_WORKSPACE/.env
          #cp .env $GITHUB_WORKSPACE/.env-1
        
        
      - name: Create release files
        env:
          THIS_REPO: ${{ github.repository }}
          RELEASE_TAG: ${{ needs.calculate_new_tag.outputs.tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -x
          #source .env
          pwd
          ls -la 
          ls -la stuff/
          source $GITHUB_WORKSPACE/.env
          #-------------------------------------------------#
          # echo test
          #-------------------------------------------------#
          echo   #-------------------------------------------------#

          echo "harbor.getapp.sh/getapp-dev/api:${API_TAG}"
          echo "harbor.getapp.sh/getapp-dev/delivery:${DELIVERY_TAG}"
          echo "harbor.getapp.sh/getapp-dev/deploy:${DEPLOY_TAG}"
          echo "harbor.getapp.sh/getapp-dev/discovery:${DISCOVERY_TAG}"
          echo "harbor.getapp.sh/getapp-dev/offering:${OFFERING_TAG}"
          echo "harbor.getapp.sh/getapp-dev/project-managment:${PROJECT_MANAGMENT_TAG}"
          echo "harbor.getapp.sh/getapp-dev/upload:${UPLOAD_TAG}"
          echo "harbor.getapp.sh/getapp-dev/getmap-node:${GETMAP_TAG}"
          echo "harbor.getapp.sh/getapp-dev/dashboard:${DASHBOARD_TAG}"
          echo "harbor.getapp.sh/getapp-dev/docs:${DOCS_TAG}"      
          
          echo   #-------------------------------------------------#


          #-------------------------------------------------#
          # END
          #-------------------------------------------------#
          chmod +x $GITHUB_WORKSPACE/templater
          # create getapp-release-info.txt
          rm $GITHUB_WORKSPACE/stuff/getapp-release-info.txt
          cp ./stuff/getapp-release-info-template.txt ./stuff/getapp-release-info-template-1.txt
          $GITHUB_WORKSPACE/templater $GITHUB_WORKSPACE/stuff/getapp-release-info-template-1.txt >> $GITHUB_WORKSPACE/stuff/getapp-release-info.txt
          rm ./stuff/getapp-release-info-template-1.txt
          
          # create getapp-images-list.txt
          rm $GITHUB_WORKSPACE/getapp-images-list.txt
          cp ./stuff/images-list-template.txt ./stuff/images-list-template-1.txt
          /bin/bash $GITHUB_WORKSPACE/templater $GITHUB_WORKSPACE/stuff/images-list-template-1.txt >> $GITHUB_WORKSPACE/getapp-images-list.txt
          rm ./stuff/images-list-template-1.txt

          # create getapp-images-list.txt
          rm $GITHUB_WORKSPACE/docker-compose/docker-compose.yaml
          cp ./stuff/docker-compose-template.txt ./stuff/docker-compose-template-1.txt
          /bin/bash $GITHUB_WORKSPACE/templater $GITHUB_WORKSPACE/stuff/docker-compose-template-1.txt >> $GITHUB_WORKSPACE/docker-compose/docker-compose.yaml
          rm ./stuff/docker-compose-template-1.txt

          # test the results
          cat stuff/getapp-release-info.txt
          cat getapp-images-list.txt
          chmod +x test-existens-in-harbor.sh
          cat stuff/getapp-release-info.txt > readme.md
          ./test-existens-in-harbor.sh

          # chart change
          sed -E -i "s,api1":" .*,api":" ${API_TAG},g" integration-chart/values.yml
          sed -E -i "s,delivery":" .*,delivery":" ${DELIVERY_TAG},g" integration-chart/values.yml
          sed -E -i "s,deploy":" .*,deploy":" ${DEPLOY_TAG},g" integration-chart/values.yml
          sed -E -i "s,discovery":" .*,discovery":" ${DISCOVERY_TAG},g" integration-chart/values.yml
          sed -E -i "s,offering":" .*,offering":" ${OFFERING_TAG},g" integration-chart/values.yml
          sed -E -i "s,projectmanagment":" .*,projectmanagment":" ${PROJECT_MANAGEMENT_TAG},g" integration-chart/values.yml
          sed -E -i "s,upload":" .*,upload":" ${UPLOAD_TAG},g" integration-chart/values.yml
          sed -E -i "s,dashboard":" .*,dashboard":" ${DASHBOARD_TAG},g" integration-chart/values.yml
          sed -E -i "s,getmap":" .*,getmap":" ${GETMAP_TAG},g" integration-chart/values.yml
          sed -E -i "s,docs":" .*,docs":" ${DOCS_TAG},g" integration-chart/values.yml
          sed -E -i "s,gitlabrelease":" .*,gitlabrelease":" ${GETAPP_RELEASE_TAG},g" integration-chart/values.yml

          # getapp and getmap #
          sed -E -i "s,configmap":" .*,configmap":" ${NAMESPACE},g" integration-chart/values.yml
          sed -E -i "s,routePrefix":" .*,routePrefix":" ${NAMESPACE},g" integration-chart/values.yml
          sed -E -i "s,dbName":" .*,dbName":" ${NAMESPACE},g" integration-chart/values.yml
          sed -E -i "s,openshiftProjectName":" .*,openshiftProjectName":" ${NAMESPACE},g" integration-chart/values.yml
          sed -E -i "s,replicaCount":" .*,replicaCount":" ${replicaCount},g" integration-chart/values.yml
          cat integration-chart/values.yml

          # git push
          git config user.email "david@linnovate.net"
          git config user.name "ci-bot"
          echo "================================================================"
          echo test >> stuff/nothing
          rm -f GetAppAgent* || true
          rm agent.exe || true
          # chmod +x ./stuff/pull-github-artifacts.sh
          # ./stuff/pull-github-artifacts.sh
          git add .
          git tag $RELEASE_TAG || true
          git commit -m "Automated commit from GitHub Actions"
          git push origin main

        shell: bash

      - name: Zip all repository files
        env:
          RELEASE_TAG: ${{ needs.calculate_new_tag.outputs.tag }}

        run: |
          zip -r getapp-chart-${RELEASE_TAG}.zip .
        shell: bash

      - name: Upload zipped files
        uses: actions/upload-artifact@v3
        with:
          name: getapp-chart
          path: getapp-chart-${{ needs.calculate_new_tag.outputs.tag }}.zip

  
  zip_images:
    needs:
      - get_all_microservices_tags
      - calculate_new_tag
      - create_files_with_updated_env
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: zip images
        env:
          RELEASE_TAG: ${{ needs.calculate_new_tag.outputs.tag }}

        run: |
          chmod +x getapp-images-to-tar.sh
          ./getapp-images-to-tar.sh
          mv *.zip getapp-images-${RELEASE_TAG}.zip

      - name: Upload zipped files
        uses: actions/upload-artifact@v3
        with:
          name: getapp-images
          path: getapp-images-${{ needs.calculate_new_tag.outputs.tag }}.zip

            
  upload_to_azure:
    runs-on: ubuntu-latest
    needs: 
      - create_files_with_updated_env
      - zip_images
    steps:
      - name: Download zipped files
        uses: actions/download-artifact@v3
        with:
          name: getapp-chart

      - name: Download zipped files
        uses: actions/download-artifact@v3
        with:
          name: getapp-images
  
      - name: Upload file to Azure Storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload \
              --account-name $AZURE_STORAGE_ACCOUNT \
              --account-key $AZURE_STORAGE_KEY \
              --container-name $AZURE_CONTAINER \
              --file getapp-chart-${{ needs.calculate_new_tag.outputs.tag }}.zip \
              --name getapp-chart-${{ needs.calculate_new_tag.outputs.tag }}.zip

            az storage blob upload \
              --account-name $AZURE_STORAGE_ACCOUNT \
              --account-key $AZURE_STORAGE_KEY \
              --container-name $AZURE_CONTAINER \
              --file getapp-images-${{ needs.calculate_new_tag.outputs.tag }}.zip \
              --name getapp-images-${{ needs.calculate_new_tag.outputs.tag }}.zip

        env:
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}

      - name: Generate Download Link
        id: get-link
        env:
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}
        run: |
          echo "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_CONTAINER}/repo-files.zip" > download_link.txt
          cat download_link.txt
