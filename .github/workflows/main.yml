name: Upload to Azure and Get Download Link

on:
  push:
    branches:
      - main

jobs:
  calculate_new_tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.NEW_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      - name: Calculate new tag
        id: set_tag
        run: |
          LAST_TAG=$(git describe --abbrev=0 --tags)
          MAJOR=$(echo $LAST_TAG | awk -F'.' '{print $1}')
          MINOR=$(echo $LAST_TAG | awk -F'.' '{print $2}')
          PATCH=$(echo $LAST_TAG | awk -F'.' '{print $3}' | awk -F'-' '{print $1}')
          SUFFIX=$(echo $LAST_TAG | awk -F'-' '{print $2}')
          NEXT_PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$NEXT_PATCH-$SUFFIX"
          echo "new tag is: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      # - name: Save NEW_TAG to .env
      #   run: echo "GETAPP_RELEASE_TAG=${{ steps.set_tag.outputs.NEW_TAG }}" > .env

      # - name: Upload .env file
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: env-file
      #     path: .env

  get_all_microservices_tags:
    needs: calculate_new_tag
    runs-on: ubuntu-latest
    steps:

      # - name: Download .env file
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: env-file

      # - name: Source .env file
      #   run: |
      #     if [ -f ".env" ]; then
      #       export $(grep -v '^#' .env | xargs)
      #       echo "Loaded variables from .env"
      #     else
      #       echo ".env file does not exist."
      #     fi

      - name: Get all microservices tags
        env:
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -x
          # Clear the file first
          rm .env || true
          
          # Start with the new release tag (only once)
          echo "GETAPP_RELEASE_TAG=${{ needs.calculate_new_tag.outputs.tag }}" > .env
          
          # Define repositories in the order you want them to appear
          declare -A REPOSITORIES=(
            ["API"]="getappsh/api"
            ["DELIVERY"]="getappsh/delivery"
            ["DEPLOY"]="getappsh/deploy"
            ["DISCOVERY"]="getappsh/discovery"
            ["OFFERING"]="getappsh/offering"
            ["PROJECT_MANAGEMENT"]="getappsh/project-management"
            ["UPLOAD"]="getappsh/upload"
            ["GETMAP"]="getappsh/getmap"
            ["DASHBOARD"]="getappsh/dashboard"
          )
          
          # Process each repository and append to .env
          for PROJECT in "${!REPOSITORIES[@]}"; do
            REPO=${REPOSITORIES[$PROJECT]}
            TAG=$(curl -s -H "Authorization: token $ACCESS_TOKEN" \
              "https://api.github.com/repos/${REPO}/tags" | \
              jq -r '[.[] | select(.name | contains("develop"))][0].name // "null"')
            
            # Only append if we got a tag
            if [ ! -z "$TAG" ]; then
              echo "${PROJECT}_TAG=${TAG}" >> .env
            else
              echo "Warning: No tag found for ${REPO}"
            fi
          done
          
          # Print the final contents without line numbers
          echo "Final .env contents:"
          cat .env
          cp .env env-file

      - uses: actions/upload-artifact@v3
        with:
          name: env-file
          path: env-file


  create_files_with_updated_env:
    needs: get_all_microservices_tags
    runs-on: ubuntu-latest
    steps:
      - name: Download .env file
        uses: actions/download-artifact@v3
        with:
          name: env-file

      - name: Create release files
        run: |
          mv env-file .env
          source .env
          envsubst < stuff/getapp-release-info-template.txt > stuff/getapp-release-info.txt
          envsubst < stuff/images-list-template.txt > getapp-images-list.txt
          envsubst < stuff/docker-compose-template.txt > docker-compose/docker-compose.yaml

          cat stuff/getapp-release-info.txt
          cat getapp-images-list.txt
          chmod +x test-existens-in-harbor.sh
          cat stuff/getapp-release-info.txt > readme.md
          ./test-existens-in-harbor.sh

      # - name: Upload release artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: release-files
      #     path: |
      #       stuff/getapp-release-info.txt
      #       getapp-images-list.txt
      #       docker-compose/docker-compose.yaml

  update_helm_chart:
    needs: create_files_with_updated_env
    runs-on: ubuntu-latest
    env:
      NAMESPACE: azure-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download .env file
        uses: actions/download-artifact@v3
        with:
          name: env-file

      - name: Update Helm chart values
        run: |
            source env
            sed -E -i "s,api1":" .*,api":" ${API_TAG},g" integration-chart/values.yml
            sed -E -i "s,delivery":" .*,delivery":" ${DELIVERY_TAG},g" integration-chart/values.yml
            sed -E -i "s,deploy":" .*,deploy":" ${DEPLOY_TAG},g" integration-chart/values.yml
            sed -E -i "s,discovery":" .*,discovery":" ${DISCOVERY_TAG},g" integration-chart/values.yml
            sed -E -i "s,offering":" .*,offering":" ${OFFERING_TAG},g" integration-chart/values.yml
            sed -E -i "s,projectmanagment":" .*,projectmanagment":" ${PROJECT_MANAGMENT_TAG},g" integration-chart/values.yml
            sed -E -i "s,upload":" .*,upload":" ${UPLOAD_TAG},g" integration-chart/values.yml
            sed -E -i "s,dashboard":" .*,dashboard":" ${DASHBOARD_TAG},g" integration-chart/values.yml
            sed -E -i "s,getmap":" .*,getmap":" ${GETMAP_TAG},g" integration-chart/values.yml
            sed -E -i "s,docs":" .*,docs":" ${DOCS_TAG},g" integration-chart/values.yml
            sed -E -i "s,gitlabrelease":" .*,gitlabrelease":" ${GETAPP_RELEASE_TAG},g" integration-chart/values.yml

            # getapp and getmap #
            sed -E -i "s,configmap":" .*,configmap":" ${NAMESPACE},g" integration-chart/values.yml
            sed -E -i "s,routePrefix":" .*,routePrefix":" ${NAMESPACE},g" integration-chart/values.yml
            sed -E -i "s,dbName":" .*,dbName":" ${NAMESPACE},g" integration-chart/values.yml
            sed -E -i "s,openshiftProjectName":" .*,openshiftProjectName":" ${NAMESPACE},g" integration-chart/values.yml
            sed -E -i "s,replicaCount":" .*,replicaCount":" ${replicaCount},g" integration-chart/values.yml
            cat integration-chart/values.yml

      # - name: Save updated Helm chart
      #   run: |
      #     mkdir -p artifacts
      #     cp integration-chart/values.yml artifacts/values.yml

      - name: Zip all repository files
        run: |
          zip -r repo-files.zip .
        shell: bash

      - name: Upload zipped files
        uses: actions/upload-artifact@v3
        with:
          name: repo-zip
          path: repo-files.zip
  # commit:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Git configuration
  #       run: |
  #         git config user.email "david@linnovate.net"
  #         git config user.name "ci-bot"

  #     - name: Modify files and commit
  #       run: |
  #         cat .env
  #         echo test >> stuff/nothing
  #         rm -f GetAppAgent* || true
  #         rm agent.exe || true
  #         chmod +x ./stuff/pull-github-artifacts.sh
  #         # ./stuff/pull-github-artifacts.sh
  #         git remote add github https://github.com/${{ github.repository }} || true
  #         git add .
  #         git tag ${{ secrets.GETAPP_RELEASE_TAG }} || true
  #         git commit -am "push back from pipeline"
  #         git push github HEAD:develop --no-verify

  #     - name: Save commit SHA
  #       run: echo "${GITHUB_SHA}" > commit_sha.txt

  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: commit-artifacts
  #         path: |
  #           .env
  #           stuff/getapp-release-info.txt
  #           stuff/url_job_link.txt
  #           readme.md
  #           commit_sha.txt
            
  upload_to_azure:
    runs-on: ubuntu-latest
    needs: update_helm_chart
    steps:
      - name: Download zipped files
        uses: actions/download-artifact@v3
        with:
          name: repo-zip

      - name: Upload file to Azure Storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload \
              --account-name $AZURE_STORAGE_ACCOUNT \
              --account-key $AZURE_STORAGE_KEY \
              --container-name $AZURE_CONTAINER \
              --file repo-files.zip \
              --name repo-files.zip
        env:
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}

      - name: Generate Download Link
        id: get-link
        env:
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}
        run: |
          echo "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_CONTAINER}/repo-files.zip" > download_link.txt
          cat download_link.txt
