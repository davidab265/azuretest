{{- if (include "infra.enabled" .) }}
# configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgadmin-scripts
data:
  setup-servers.sh: |
    #!/bin/bash
    # setup-servers.sh

    # Wait for pgAdmin to be ready
    wait_for_pgadmin() {
        echo "Waiting for pgAdmin to start..."
        until curl -s "http://localhost/misc/ping" > /dev/null; do
            sleep 2
        done
        echo "pgAdmin is up!"
        sleep 5  # Give it a few more seconds to fully initialize
    }

    # Start pgAdmin in background
    /entrypoint.sh &

    # Wait for it to be ready
    wait_for_pgadmin

    # Get CSRF token and cookie
    echo "Getting CSRF token..."
    CSRF_TOKEN=$(curl -c /tmp/cookies.txt -s http://localhost/security/csrf | jq -r .csrf_token)

    # Login
    echo "Logging in..."
    curl -X POST http://localhost/security/login \
        -H "Content-Type: application/json" \
        -H "X-CSRF-TOKEN: $CSRF_TOKEN" \
        -b /tmp/cookies.txt \
        -c /tmp/cookies.txt \
        -d "{\"email\":\"$PGADMIN_DEFAULT_EMAIL\",\"password\":\"$PGADMIN_DEFAULT_PASSWORD\"}"

    # Add server
    echo "Adding server..."
    curl -X POST http://localhost/browser/server/obj/ \
        -H "Content-Type: application/json" \
        -H "X-CSRF-TOKEN: $CSRF_TOKEN" \
        -b /tmp/cookies.txt \
        -d '{
            "name": "PostgreSQL Server",
            "host": "postgres-service",
            "port": 5432,
            "db": "postgres",
            "username": "postgres",
            "password": "postgres",
            "role": "",
            "comment": "",
            "group": "Servers"
        }'

    # Keep container running
    wait
---
# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
      - name: pgadmin
        image: dpage/pgadmin4:latest
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          value: "admin@admin.com"
        - name: PGADMIN_DEFAULT_PASSWORD
          value: "admin123"
        command: ["/script/setup-servers.sh"]
        ports:
        - containerPort: 80
        volumeMounts:
        - name: pgadmin-scripts
          mountPath: /script
        # - name: pgadmin-data
        #   mountPath: /var/lib/pgadmin
      volumes:
      - name: pgadmin-scripts
        configMap:
          name: pgadmin-scripts
          defaultMode: 0777
      # - name: pgadmin-data
      #   persistentVolumeClaim:
      #     claimName: pgadmin-pvc
---
# service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
spec:
  selector:
    app: pgadmin
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---
# pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgadmin-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
{{- end }}