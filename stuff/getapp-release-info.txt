# getapp/getmap release info:

This is the list of docker images that or included in this release.

## Release 1.0.23 


### GETAPP


**getapp microservices:**

|   | MICROSERVICE NAME | TAG                     | IMAGE DOWNLOAD LINK                                                    |
|---|--------------------|--------------------------|-------------------------------------------------------------------------|
| 1 | api                | 1.2.50               | harbor.getapp.sh/getapp-dev/api:1.2.50                              |
| 2 | delivery           | 1.1.44          | harbor.getapp.sh/getapp-dev/delivery:1.1.44                    |
| 3 | deploy             | 1.1.28            | harbor.getapp.sh/getapp-dev/deploy:1.1.28                        |
| 4 | discovery          | 1.1.41         | harbor.getapp.sh/getapp-dev/discovery:1.1.41                  |
| 5 | offering           | 1.1.41          | harbor.getapp.sh/getapp-dev/offering:1.1.41                    |
| 6 | project management | 1.1.15 | harbor.getapp.sh/getapp-dev/project-management:1.1.15 |
| 7 | upload             | 1.1.22            | harbor.getapp.sh/getapp-dev/upload:1.1.22                        |
| 8 | getmap        | 1.0.55            | harbor.getapp.sh/getapp-dev/getmap-node:1.0.55                        |
| 9 | dashboard          | 1.1.22         | harbor.getapp.sh/getapp-dev/dashboard:1.1.22                  |

# Deploying GetApp on Kubernetes
To deploy GetApp on Kubernetes, follow these steps:

### 1. Clone the Repository

Clone the repository using the following command:
```
git clone ssh://git@gitlab.getapp.sh:8822/getapp/getapp-version-control.git
```

### 2. Download Images from Development Harbor Repository

Download the images from the development Harbor repository. Run the script `getapp-images-to-tar.sh`. This script utilizes the file `getapp-images-list.txt` to download all images of GetApp, saving them to separate tar files. Then, it zips all of them into one file with the name `getapp-<current_date>.zip`.

```
./getapp-images-to-tar.sh
```

### 3. Upload Images to Local Image Repository

Configure the URL, username, and password in the top section of the `load-images.sh` script. Then, execute the script to upload the images to your local image repository.
```
./load-images.sh
```
### 4. Deploy the Helm Chart

Deploy the Helm chart using the following command:
```
helm upgrade -n <NAMESPACE> -i <HELM_PROJECT_NAME> -f ./integration-chart/Values.yaml ./integration-chart

```
Replace "<NAMESPACE>" with the desired Kubernetes namespace and "<HELM_PROJECT_NAME>" with the name you want to assign to your Helm project.

### Some very importent things you need to know about this chart!
1. the chart is build to deploy on Openshift. it uses a "Route" and not "Ingress". so if you deploy it not on openshift, you will need to create a ingress to expose the route.
2. the chart creates a strimzi kafka cluster that is used by the apps. if you dont use the strimzi operator, but you use a different kafka cluster, you will need to edit the configmap and enter the details of the kafka you use.
3. the chart creates a postgres cluster with the crunchy data operator. if you use a diffrent posgress, you will need to edit the configmap and enter the details of the posgress you use.

